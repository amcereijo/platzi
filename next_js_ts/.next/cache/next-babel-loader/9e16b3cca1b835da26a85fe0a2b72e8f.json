{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/amcereijo/Documents/git/platzi/next_js_ts/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import App from \"next/app\";\nimport Layout from 'components/Layout/Layout';\n\n// glboal css\n// import '../style.css';\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  // Providers - Context/Providers, Theme, data\n  // Layout\n  // props adicionales\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  })));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext: AppContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//   return { ...appProps }\n// }\n\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/amcereijo/Documents/git/platzi/next_js_ts/pages/_app.tsx"],"names":["Layout","MyApp","Component","pageProps"],"mappings":";;;;AAAA;AACA,OAAOA,MAAP,MAAmB,0BAAnB;;AAGA;AACA;AAEA,SAASC,KAAT,OAAmD;AAAA,MAAlCC,SAAkC,QAAlCA,SAAkC;AAAA,MAAvBC,SAAuB,QAAvBA,SAAuB;AACjD;AACA;AACA;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;KArBSF,K;AAuBT,eAAeA,KAAf","sourcesContent":["// import App from \"next/app\";\nimport Layout from 'components/Layout/Layout'\nimport type { AppProps /*, AppContext */ } from 'next/app'\n\n// glboal css\n// import '../style.css';\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  // Providers - Context/Providers, Theme, data\n  // Layout\n  // props adicionales\n  return (\n    <Layout>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext: AppContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n\n//   return { ...appProps }\n// }\n\nexport default MyApp"]},"metadata":{},"sourceType":"module"}